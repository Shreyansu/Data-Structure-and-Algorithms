Check for Children Sum Property in a Binary Tree
Last Updated: 03-04-2019
Given a binary tree, write a function that returns true if the tree satisfies below property.
For every node, data value must be equal to sum of data values in left and right children. Consider data value as 0 for NULL children. Below tree is an example









#include <bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    struct node* left;
    struct node* right;
};

struct node* newNode(int data)
{
    struct node *node=(struct node*)malloc(sizeof(struct node));
    node->data=data;
    node->left=NULL;
    node->right=NULL;
    return node;
}

int check(struct node* node)
{
    int left_d=0,right_d=0;
    if(node==NULL ||((node->left==NULL)&&(node->right==NULL)))
        return 1;
    else
    {
        if(node->left!=NULL)
            left_d=node->left->data;
        if(node->right!=NULL)
            right_d=node->right->data;
        
        if(node->data==left_d+right_d && check(node->left) && check(node->right))
            return 1;
        else
        
            return 0;
    }
}
int main() 
{
    struct node *root = newNode(10); 
    root->left     = newNode(8); 
    root->right = newNode(2); 
    root->left->left = newNode(3); 
    root->left->right = newNode(5); 
    root->right->right = newNode(2);
    
    if(check(root))
        cout<<true<<endl;
    else
        cout<<false<<endl;
    
    
	return 0;
}
