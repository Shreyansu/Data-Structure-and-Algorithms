#include <bits/stdc++.h>
using namespace std;


class graph
{
    int n;
    list<int>* adj;
    
    
    public:
        graph(int n);
        void addEdge(int u,int v);
        bool iscyclicutil(int u,bool vis[],int parent);
        bool iscyclic();
        
};

graph::graph(int n)
    {
        this->n=n;
        adj=new list<int>[n];
    }
void graph ::addEdge(int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}
    
bool graph::iscyclicutil(int u,bool vis[],int parent)
{
    vis[u]=true;
    list<int>::iterator i;
    for(i=adj[u].begin();i!=adj[u].end();++i)
    {
        if(!vis[*i])
        {
            if(iscyclicutil(*i,vis,u))
                return true;
        }
        else if(*i!=parent)
            return true;
    }
    return false;
}
    
    
bool graph::iscyclic()
{
    bool *vis=new bool[n];
    for(int i=0;i<n;i++)
        vis[i]=false;
    for(int i=0;i<n;i++)
    {
        if(!vis[i])
        {
            if(iscyclicutil(i,vis,-1))
                return true;
        }
    }
    return false;
}
    
    
    
int main()
{
    graph g1(5);
    g1.addEdge(1, 0); 
    g1.addEdge(0, 2); 
    g1.addEdge(2, 1); 
    g1.addEdge(0, 3); 
    g1.addEdge(3, 4); 
    g1.iscyclic()?  
       cout << "Graph contains cycle\n": 
       cout << "Graph doesn't contain cycle\n"; 
  
    graph g2(3); 
    g2.addEdge(0, 1); 
    g2.addEdge(1, 2); 
    g2.iscyclic()?  
       cout << "Graph contains cycle\n": 
       cout << "Graph doesn't contain cycle\n"; 
  
    return 0;
}
