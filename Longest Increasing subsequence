
Longest Increasing Subsequence | DP-3
Last Updated: 18-05-2020
We have already discussed Overlapping Subproblems and Optimal Substructure properties.

Now, let us discuss the Longest Increasing Subsequence (LIS) problem as an example problem that can be solved using Dynamic Programming.
The Longest Increasing Subsequence (LIS) problem is to find the length of the longest subsequence of a given sequence 
such that all elements of the subsequence are sorted in increasing order. 
For example, the length of LIS for {10, 22, 9, 33, 21, 50, 41, 60, 80} is 6 and LIS is {10, 22, 33, 50, 60, 80}.









#include<bits/stdc++.h>
using namespace std;

int lis(int arr[],int n)
{
	int seq[n];
	seq[0]=1;
	
	for(int i=1;i<n;i++)
	{
		seq[i]=1;
		for(int j=0;j<i;j++)
		{
			if(arr[i]>arr[j] && seq[j]+1>seq[i])
				seq[i]=seq[j]+1;
		}
	}
	
	return *max_element(seq,seq+n);
}


int main()
{
	int arr[]={10,22,9,33,21,50,41,60,29};
	cout<<lis(arr,9);
	return 0;
	
}
