#include<bits/stdc++.h> 
using namespace std;

int n=6;
vector<pair<int,int>> adj[7];
vector<int> dis(7,-1);
vector<bool> vis(7,false);

void addEdge(int u,int v,int w)
{
    adj[u].push_back(make_pair(v,w));
}
void topoutil(int i,stack<int>& st)
{
    vis[i]=true;
    for(int j=0;j<adj[i].size();j++)
    {
        pair<int,int> adjacent=adj[i][j];
        if(!vis[adjacent.first])
            topoutil(adjacent.first,st);
            
            
    }
    st.push(i);
}

void topo(int s)
{
    
    //first sort the given graph in topological order
    stack<int> st;
    for(int i=0;i<n;i++)
    {
        if(!vis[i])
            topoutil(i,st);
    }
    dis[s]=0;
    while(!st.empty())
    {
        int x=st.top();
        st.pop();
        if(dis[x]!=-1)
        {
            for(int i=0;i<adj[x].size();i++)
            {
                pair<int,int> adjacent=adj[x][i];
                //Main part of program...remaining part is just a topological sorting
                if(dis[adjacent.first]<dis[x]+adjacent.second)
                    dis[adjacent.first]=dis[x]+adjacent.second;
            
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<dis[i]<<" ";
    }
}

int main()
{
    addEdge(0, 1, 5);  
    addEdge(0, 2, 3);  
    addEdge(1, 3, 6);  
    addEdge(1, 2, 2);  
    addEdge(2, 4, 4);  
    addEdge(2, 5, 2);  
    addEdge(2, 3, 7);  
    addEdge(3, 5, 1);  
    addEdge(3, 4, -1);  
    addEdge(4, 5, -2);
    
    int s=1;
    topo(s);
    
    return 0;
    
}
