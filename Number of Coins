Find minimum number of coins that make a given value

Given a value V, if we want to make change for V cents, and we have infinite supply of each of C = { C1, C2, .. , Cm} valued coins, what is the minimum number of coins to make the change?
Examples:

Input: coins[] = {25, 10, 5}, V = 30
Output: Minimum 2 coins required
We can use one coin of 25 cents and one of 5 cents 

Input: coins[] = {9, 6, 5, 1}, V = 11
Output: Minimum 2 coins required
We can use one coin of 6 cents and 1 coin of 5 cents



Recursive Approach

class Solution{

	public:
	int minCoins(int coins[], int M, int V) 
	{ 
	    if(V==0)
	        return 0;
	        
	    int res=INT_MAX;
	    
	    for(int i=0;i<M;i++)
	    {
	        if(coins[i]<=V)
	        {
	            int sub_res=minCoins(coins,M,V-coins[i]);
	            
	            if(sub_res !=INT_MAX && sub_res+1<res)
	            res=sub_res+1;
	        }
	            
	    }
	    return res;
	} 
	  
};

Dynammic approach

